{"ast":null,"code":"import { takeLatest, call, put, all } from \"redux-saga/effects\";\nimport ShopActionTypes from \"./shop.types\";\nimport { firestore, convertCollectionSnapShotToMap } from \"../../components/firbase/firebase\";\nimport { fetchCollectionSuccess, fetchCollectionFailure } from \"./shop.actions\"; //takeEvery - listens every actions\n\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection(\"collections\");\n    const snapshot = yield collectionRef.get();\n    const collectionMap = yield call(convertCollectionSnapShotToMap, snapshot); //call- invoke method\n    // put is the saga effect for creating action\n\n    yield put(fetchCollectionSuccess(collectionMap));\n  } catch (error) {\n    yield put(fetchCollectionFailure(error.message));\n  }\n}\nexport function* fetchCollectionsStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTION_START, fetchCollectionsAsync);\n}\nexport function* shopSagas() {\n  yield all([call(fetchCollectionsStart)]);\n}","map":{"version":3,"sources":["/Users/apple/Documents/work_place/react/clothing-ecommerce/client/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","all","ShopActionTypes","firestore","convertCollectionSnapShotToMap","fetchCollectionSuccess","fetchCollectionFailure","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionMap","error","message","fetchCollectionsStart","FETCH_COLLECTION_START","shopSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SACEC,SADF,EAEEC,8BAFF,QAGO,mCAHP;AAIA,SAASC,sBAAT,EAAiCC,sBAAjC,QAA+D,gBAA/D,C,CAEA;;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,MAAI;AACF,UAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,aAAa,GAAG,MAAMb,IAAI,CAACK,8BAAD,EAAiCM,QAAjC,CAAhC,CAHE,CAG0E;AAC5E;;AACA,UAAMV,GAAG,CAACK,sBAAsB,CAACO,aAAD,CAAvB,CAAT;AACD,GAND,CAME,OAAOC,KAAP,EAAc;AACd,UAAMb,GAAG,CAACM,sBAAsB,CAACO,KAAK,CAACC,OAAP,CAAvB,CAAT;AACD;AACF;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMjB,UAAU,CACdI,eAAe,CAACc,sBADF,EAEdT,qBAFc,CAAhB;AAID;AAED,OAAO,UAAUU,SAAV,GAAsB;AAC3B,QAAMhB,GAAG,CAAC,CAACF,IAAI,CAACgB,qBAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, call, put, all } from \"redux-saga/effects\";\nimport ShopActionTypes from \"./shop.types\";\nimport {\n  firestore,\n  convertCollectionSnapShotToMap\n} from \"../../components/firbase/firebase\";\nimport { fetchCollectionSuccess, fetchCollectionFailure } from \"./shop.actions\";\n\n//takeEvery - listens every actions\n\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection(\"collections\");\n    const snapshot = yield collectionRef.get();\n    const collectionMap = yield call(convertCollectionSnapShotToMap, snapshot); //call- invoke method\n    // put is the saga effect for creating action\n    yield put(fetchCollectionSuccess(collectionMap));\n  } catch (error) {\n    yield put(fetchCollectionFailure(error.message));\n  }\n}\n\nexport function* fetchCollectionsStart() {\n  yield takeLatest(\n    ShopActionTypes.FETCH_COLLECTION_START,\n    fetchCollectionsAsync\n  );\n}\n\nexport function* shopSagas() {\n  yield all([call(fetchCollectionsStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}