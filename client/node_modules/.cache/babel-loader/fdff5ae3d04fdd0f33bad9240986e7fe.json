{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Documents/work_place/react/clothing-ecommerce/src/pages/ShopPage/ShopPage.jsx\";\nimport React, { Component } from \"react\";\nimport CollectionsOverview from \"../../components/CollectionsOverview/CollectionsOverview\";\nimport { Route } from \"react-router-dom\";\nimport Collection from \"../Collection/Collection\";\nimport { fetchCollectionStartAsync } from \"../../redux/shop/shop.actions\";\nimport { connect } from \"react-redux\";\nimport WithSpinner from \"../../components/WithSpinner/WithSpinner\";\nimport { createStructuredSelector } from \"reselect\";\nimport { selectShopCollectionsisFetching } from \"../../redux/shop/shop.selectors\";\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionWithSpinner = WithSpinner(Collection);\n\nclass ShopPage extends Component {\n  componentDidMount() {\n    const {\n      fetchCollectionStartAsync\n    } = this.props;\n    fetchCollectionStartAsync(); // const { updateCollections } = this.props;\n    // const collectionRef = firestore.collection(\"collections\");\n    // fetch(\n    //   \"https://firestore.googleapis.com/v1/projects/clothing-ecommerce-adf0b/databases/(default)/documents/collections\"\n    // )\n    //   .then(response => response.json())\n    //   .then(collections => console.log(\"collections\", collections));\n    // normal api fetch\n    // collectionRef.get().then(async snapshot => {\n    //   const collectionsMap = convertCollectionSnapShotToMap(snapshot);\n    //   updateCollections(collectionsMap);\n    //   this.setState({\n    //     loading: false\n    //   });\n    // });\n    // live data\n    // collectionRef.onSnapshot(async snapshot => {\n    //   const collectionsMap = convertCollectionSnapShotToMap(snapshot);\n    //   updateCollections(collectionsMap);\n    //   this.setState({\n    //     loading: false\n    //   });\n    // });\n  }\n\n  render() {\n    const {\n      match,\n      isFetching\n    } = this.props; // const { loading } = this.state;\n\n    return React.createElement(\"div\", {\n      className: \"shop-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: `${match.path}` // component={CollectionsOverview}\n      ,\n      render: props => React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n        isLoading: isFetching\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: `${match.path}/:collectionId` // component={Collection}\n      ,\n      render: props => React.createElement(CollectionWithSpinner, Object.assign({\n        isLoading: isFetching\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapsStateToProps = createStructuredSelector({\n  isCollectionFetching: selectShopCollectionsisFetching\n});\n\nconst mapsToDispatch = dispatch => ({\n  fetchCollectionStartAsync: () => dispatch(fetchCollectionStartAsync())\n});\n\nexport default connect(mapsStateToProps, mapsToDispatch)(ShopPage);","map":{"version":3,"sources":["/Users/apple/Documents/work_place/react/clothing-ecommerce/src/pages/ShopPage/ShopPage.jsx"],"names":["React","Component","CollectionsOverview","Route","Collection","fetchCollectionStartAsync","connect","WithSpinner","createStructuredSelector","selectShopCollectionsisFetching","CollectionsOverviewWithSpinner","CollectionWithSpinner","ShopPage","componentDidMount","props","render","match","isFetching","path","mapsStateToProps","isCollectionFetching","mapsToDispatch","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,mBAAP,MAAgC,0DAAhC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AAEA,SAASC,yBAAT,QAA0C,+BAA1C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,WAAP,MAAwB,0CAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,+BAAT,QAAgD,iCAAhD;AAEA,MAAMC,8BAA8B,GAAGH,WAAW,CAACL,mBAAD,CAAlD;AACA,MAAMS,qBAAqB,GAAGJ,WAAW,CAACH,UAAD,CAAzC;;AAEA,MAAMQ,QAAN,SAAuBX,SAAvB,CAAiC;AAC/BY,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAER,MAAAA;AAAF,QAAgC,KAAKS,KAA3C;AACAT,IAAAA,yBAAyB,GAFP,CAGlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDU,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAwB,KAAKH,KAAnC,CADO,CAEP;;AACA,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACE,IAAK,EAFtB,CAGE;AAHF;AAIE,MAAA,MAAM,EAAEJ,KAAK,IACX,oBAAC,8BAAD;AAAgC,QAAA,SAAS,EAAEG;AAA3C,SAA2DH,KAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EASE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACE,IAAK,gBADtB,CAEE;AAFF;AAGE,MAAA,MAAM,EAAEJ,KAAK,IACX,oBAAC,qBAAD;AAAuB,QAAA,SAAS,EAAEG;AAAlC,SAAkDH,KAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,CADF;AAmBD;;AAnD8B;;AAsDjC,MAAMK,gBAAgB,GAAGX,wBAAwB,CAAC;AAChDY,EAAAA,oBAAoB,EAAEX;AAD0B,CAAD,CAAjD;;AAIA,MAAMY,cAAc,GAAGC,QAAQ,KAAK;AAClCjB,EAAAA,yBAAyB,EAAE,MAAMiB,QAAQ,CAACjB,yBAAyB,EAA1B;AADP,CAAL,CAA/B;;AAIA,eAAeC,OAAO,CAACa,gBAAD,EAAmBE,cAAnB,CAAP,CAA0CT,QAA1C,CAAf","sourcesContent":["import React, { Component } from \"react\";\n\nimport CollectionsOverview from \"../../components/CollectionsOverview/CollectionsOverview\";\nimport { Route } from \"react-router-dom\";\nimport Collection from \"../Collection/Collection\";\n\nimport { fetchCollectionStartAsync } from \"../../redux/shop/shop.actions\";\nimport { connect } from \"react-redux\";\nimport WithSpinner from \"../../components/WithSpinner/WithSpinner\";\nimport { createStructuredSelector } from \"reselect\";\nimport { selectShopCollectionsisFetching } from \"../../redux/shop/shop.selectors\";\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionWithSpinner = WithSpinner(Collection);\n\nclass ShopPage extends Component {\n  componentDidMount() {\n    const { fetchCollectionStartAsync } = this.props;\n    fetchCollectionStartAsync();\n    // const { updateCollections } = this.props;\n    // const collectionRef = firestore.collection(\"collections\");\n    // fetch(\n    //   \"https://firestore.googleapis.com/v1/projects/clothing-ecommerce-adf0b/databases/(default)/documents/collections\"\n    // )\n    //   .then(response => response.json())\n    //   .then(collections => console.log(\"collections\", collections));\n    // normal api fetch\n    // collectionRef.get().then(async snapshot => {\n    //   const collectionsMap = convertCollectionSnapShotToMap(snapshot);\n    //   updateCollections(collectionsMap);\n    //   this.setState({\n    //     loading: false\n    //   });\n    // });\n    // live data\n    // collectionRef.onSnapshot(async snapshot => {\n    //   const collectionsMap = convertCollectionSnapShotToMap(snapshot);\n    //   updateCollections(collectionsMap);\n    //   this.setState({\n    //     loading: false\n    //   });\n    // });\n  }\n\n  render() {\n    const { match, isFetching } = this.props;\n    // const { loading } = this.state;\n    return (\n      <div className=\"shop-page\">\n        <Route\n          exact\n          path={`${match.path}`}\n          // component={CollectionsOverview}\n          render={props => (\n            <CollectionsOverviewWithSpinner isLoading={isFetching} {...props} />\n          )}\n        />\n        <Route\n          path={`${match.path}/:collectionId`}\n          // component={Collection}\n          render={props => (\n            <CollectionWithSpinner isLoading={isFetching} {...props} />\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapsStateToProps = createStructuredSelector({\n  isCollectionFetching: selectShopCollectionsisFetching\n});\n\nconst mapsToDispatch = dispatch => ({\n  fetchCollectionStartAsync: () => dispatch(fetchCollectionStartAsync())\n});\n\nexport default connect(mapsStateToProps, mapsToDispatch)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}